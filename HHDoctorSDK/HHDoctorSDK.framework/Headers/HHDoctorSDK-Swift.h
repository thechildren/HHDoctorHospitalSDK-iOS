// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import NIMSDK;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HHDoctorSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif







@class NSCoder;

SWIFT_CLASS("_TtC11HHDoctorSDK13CommentBaseVC")
@interface CommentBaseVC : UIViewController
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11HHDoctorSDK9CommentVC")
@interface CommentVC : CommentBaseVC
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_PROTOCOL("_TtP11HHDoctorSDK14HHCallDelegate_")
@protocol HHCallDelegate <NSObject>
@optional
/// 呼叫状态
/// \param error 错误信息(为空表示呼叫成功)
///
- (void)onCallStatus:(NSError * _Nullable)error;
/// 呼叫完成
- (void)callFinished;
@end

/// 呼叫类型
/// <ul>
///   <li>
///     child: 儿童
///   </li>
///   <li>
///     adult: 成人
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, HHCallType, closed) {
  HHCallTypeChild = 600000,
  HHCallTypeAdult = 600002,
};


/// 用户信息
SWIFT_CLASS("_TtC11HHDoctorSDK12HHCallerInfo")
@interface HHCallerInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11HHDoctorSDK11HHDateUtils")
@interface HHDateUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








SWIFT_CLASS("_TtC11HHDoctorSDK15HHDeviceManager")
@interface HHDeviceManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11HHDoctorSDK18HHFileCacheManager")
@interface HHFileCacheManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// 接通前的呼叫状态
/// <ul>
///   <li>
///     onStart: 呼叫开始
///   </li>
///   <li>
///     waitingDoctor: 等待空闲的医生
///   </li>
///   <li>
///     callFreeDoctor: 有医生空闲，开始呼叫
///   </li>
///   <li>
///     callConnect: 建立呼叫
///   </li>
///   <li>
///     didRing: 医生响铃，等待接受
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, HHMCallingState, closed) {
  HHMCallingStateOnStart = 0,
  HHMCallingStateWaitingDoctor = 1,
  HHMCallingStateCallFreeDoctor = 2,
  HHMCallingStateCallConnect = 3,
  HHMCallingStateDidRing = 4,
};

typedef SWIFT_ENUM(NSInteger, HHMLoginCode, closed) {
  HHMLoginCodeOK = 0,
  HHMLoginCodeNetError = -1,
};

@class HHSDKOptions;
@protocol HHMVideoDelegate;

SWIFT_CLASS("_TtC11HHDoctorSDK6HHMSDK")
@interface HHMSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) HHMSDK * _Nonnull default_;)
+ (HHMSDK * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// 初始化 SDK
/// \param option 可选的 SDK 配置
///
- (void)startWithOption:(HHSDKOptions * _Nullable)option;
/// 登录账户
/// \param userToken 用户的唯一标志
///
/// \param completion 完成的回调
///
- (void)loginWithUserToken:(NSString * _Nonnull)userToken completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// 登录账号
/// \param uuid 用户的 唯一标志符
///
/// \param completion 完成回调
///
- (void)loginWithUuid:(NSInteger)uuid completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use login(userToken: String, completion: @escaping HHLoginHandler) instead.");
/// 自动登录(如果已经保存了用户帐号和令牌,建议使用这个登录方式)
/// \param uuid 自动登录参数
///
- (void)autoLoginWithUuid:(NSInteger)uuid;
/// 登出
/// \param callback 登出回调(字符串为空表示成功)
///
- (void)logout:(void (^ _Nullable)(NSString * _Nullable))callback;
/// 获取病历详情
/// \param userToken 当前人的唯一标志
///
/// \param medicId 病历id
///
///
/// returns:
/// url
- (NSString * _Nonnull)getMedicDetailWithUserToken:(NSString * _Nonnull)userToken medicId:(NSString * _Nonnull)medicId SWIFT_WARN_UNUSED_RESULT;
/// 获取病历列表
/// \param userToken 当前人的唯一标志
///
///
/// returns:
/// url
- (NSString * _Nonnull)getMedicListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
/// 获取所有病历列表
/// \param userToken 主账户的唯一标志
///
///
/// returns:
/// url
- (NSString * _Nonnull)getAllMedicsWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
/// 主动发起多人通话
/// \param type 呼叫类型
///
/// \param callee 被呼叫人的信息
///
- (void)startTeamCall:(enum HHCallType)type callee:(HHCallerInfo * _Nonnull)callee;
/// 主叫发起通话
/// \param type 呼叫类型
///
- (void)startCall:(enum HHCallType)type;
- (void)startNewCall:(NSInteger)uuid;
/// 使用指定账户发起通话
/// \param type 呼叫类型
///
/// \param from 当前呼叫使用的用户标识符(token)
///
/// \param delegate 呼叫代理
///
- (void)startCallBy:(NSString * _Nonnull)from type:(enum HHCallType)type delegate:(id <HHCallDelegate> _Nullable)delegate;
- (void)terminate;
/// 更新APNS Token
/// \param token APNS Token
///
- (void)updateAPNSWithToken:(NSData * _Nonnull)token;
/// 获取当前 SDK 版本号
@property (nonatomic, readonly, copy) NSString * _Nonnull SDKVersion;
/// 是否登录成功
@property (nonatomic, readonly) BOOL isLogined;
/// 添加视频监听
/// \param delegate 代理
///
- (void)addWithDelegate:(id <HHMVideoDelegate> _Nonnull)delegate;
- (void)removeWithDelegate:(id <HHMVideoDelegate> _Nonnull)delegate;
/// 标记已读
///
/// returns:
/// 清除的未读数
- (NSInteger)markRead SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







enum PermissionType : NSInteger;

/// 视频管理器代理
SWIFT_PROTOCOL("_TtP11HHDoctorSDK16HHMVideoDelegate_")
@protocol HHMVideoDelegate <NSObject>
@optional
/// 主动视频时的呼叫状态变化
/// \param state 当前呼叫状态
///
- (void)callStateChange:(enum HHMCallingState)state;
/// 通话已接通
- (void)callDidEstablish;
/// 呼叫失败(服务端报错)
- (void)callFailWithCode:(NSInteger)code error:(NSString * _Nonnull)error;
/// 呼叫失败（云信报错）
/// \param error 错误信息
///
- (void)onFailWithError:(NSError * _Nonnull)error;
- (void)onCancel;
/// 呼叫时获取到订单信息
- (void)receivedOrder:(NSString * _Nonnull)orderId;
/// 通话已结束 (接通之后才有结束)
- (void)callDidFinish;
/// 转呼医生
- (void)onExtensionDoctor;
/// 接收到呼叫(被呼叫方)
/// \param callID 呼叫的 id
///
- (void)onReceive:(NSString * _Nonnull)callID;
/// 收到视频呼入时的操作（被呼叫方）
/// \param accept 接受或者拒接
///
- (void)onResponse:(BOOL)accept;
/// 缺少必要权限
/// \param type 缺少的权限类型
///
- (void)onLeakPermission:(enum PermissionType)type;
@end


SWIFT_CLASS("_TtC11HHDoctorSDK23HHMediaStatusCheckUtils")
@interface HHMediaStatusCheckUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11HHDoctorSDK13HHNetObserver")
@interface HHNetObserver : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIWindow;
@class UICollectionView;
@class UICollectionViewCell;
@class UIScrollView;

IB_DESIGNABLE
SWIFT_CLASS("_TtC11HHDoctorSDK11HHPagerView")
@interface HHPagerView : UIView <UICollectionViewDataSource, UICollectionViewDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)prepareForInterfaceBuilder;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end

typedef SWIFT_ENUM(NSInteger, HHPagerViewTransformerType, closed) {
  HHPagerViewTransformerTypeCrossFading = 0,
  HHPagerViewTransformerTypeZoomOut = 1,
  HHPagerViewTransformerTypeDepth = 2,
  HHPagerViewTransformerTypeOverlap = 3,
  HHPagerViewTransformerTypeLinear = 4,
  HHPagerViewTransformerTypeCoverFlow = 5,
  HHPagerViewTransformerTypeFerrisWheel = 6,
  HHPagerViewTransformerTypeInvertedFerrisWheel = 7,
  HHPagerViewTransformerTypeCubic = 8,
};


SWIFT_CLASS("_TtC11HHDoctorSDK23HHPhotoPickerController")
@interface HHPhotoPickerController : UINavigationController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// 全局配置
SWIFT_CLASS("_TtC11HHDoctorSDK12HHSDKOptions")
@interface HHSDKOptions : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) HHSDKOptions * _Nonnull default_;)
+ (HHSDKOptions * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// hud 自动显示的时间
@property (nonatomic) NSTimeInterval hudDisTime;
/// 调试模式(打印日志)
@property (nonatomic) BOOL isDebug;
/// 是否开启测试服
@property (nonatomic) BOOL isDevelopment;
/// 产品 id
@property (nonatomic, copy) NSString * _Nonnull sdkProductId;
/// 推送证书名
@property (nonatomic, copy) NSString * _Nullable cerName;
/// 呼叫进入是否需要等待(呼入present 控制器前处理其他逻辑，3秒后自动失效)
@property (nonatomic) BOOL shouldWaingCall;
/// 是否开启美颜
@property (nonatomic) BOOL allowBeauty;
/// 允许视频完成后评价
@property (nonatomic) BOOL allowEvaluate;
/// 不要配置此参数
@property (nonatomic) BOOL isShowDocInfo;
- (nonnull instancetype)initWithSdkProductId:(NSString * _Nonnull)sdkProductId isDebug:(BOOL)isDebug isDevelop:(BOOL)isDevelop OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













typedef SWIFT_ENUM(NSInteger, PermissionType, closed) {
  PermissionTypeLocationAlways = 0,
  PermissionTypeLocationWhenInUse = 1,
  PermissionTypeMicrophone = 2,
  PermissionTypeCamera = 3,
  PermissionTypePhotos = 4,
};























































@class UITapGestureRecognizer;
@class NSTimer;

@interface UIView (SWIFT_EXTENSION(HHDoctorSDK))
- (void)hhhandleToastTapped:(UITapGestureRecognizer * _Nonnull)recognizer;
- (void)hhtoastTimerDidFinish:(NSTimer * _Nonnull)timer;
@end










/// 云信登录相关
SWIFT_CLASS("_TtC11HHDoctorSDK9VCManager")
@interface VCManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NIMCustomSystemNotification;

@interface VCManager (SWIFT_EXTENSION(HHDoctorSDK)) <NIMSystemNotificationManagerDelegate>
- (void)onReceiveCustomSystemNotification:(NIMCustomSystemNotification * _Nonnull)notification;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
